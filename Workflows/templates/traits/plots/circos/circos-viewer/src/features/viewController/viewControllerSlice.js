import { createSlice } from '@reduxjs/toolkit';

export const MAX_QTL_MODEL_COUNT = 10;

const initialState = {
    qtlModelCount: MAX_QTL_MODEL_COUNT,
    qtlConsensus: false,
    qtlMethod: "scanone",
    displayTrackLabels: false,
    linkageGroups: [],
    traits: [],
    models: []
};

export const viewControllerSlice = createSlice({
    name: 'viewController',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setQTLModelCount: (state, action) => {
            state.qtlModelCount = action.payload;
        },
        setQTLConsensus: (state, action) => {
            state.qtlConsensus = action.payload;
        },
        setQTLMethod: (state, action) => {
            state.qtlMethod = action.payload;
        },
        setDisplayTrackLabels: (state, action) => {
            state.displayTrackLabels = action.payload;
        },
        setListLL: (state, action) => { //LL stands for 'low-level' routine
            state[action.payload.name] = action.payload.list;
        },
        setListItemCheckedLL: (state, action) => {
            var element = state[action.payload.name].find(e => (e.id == action.payload.id));
            element.enabled = action.payload.enabled;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: {}
});

/* Action creators -- wrapping fundamental list elements */
const { setQTLModelCount,
        setQTLConsensus, 
        setQTLMethod, 
        setListLL, 
        setListItemCheckedLL, 
        setDisplayTrackLabels } = viewControllerSlice.actions;

export {setQTLConsensus, setQTLModelCount, setQTLMethod, setDisplayTrackLabels};

export const setList = (name) => (list) => {var payload = { list: list,
                                                            name: name };
                                            return(setListLL(payload)); };

export const setListItemChecked = (name,id) => (payload) => {payload.name   = name;
                                                             payload.id     = id;
                                                             return(setListItemCheckedLL(payload)); };

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectDisplayTrackLabels = (state) => state.viewController.displayTrackLabels;
export const selectQTLModelCount = (state) => state.viewController.qtlModelCount;
export const selectQTLConsensus = (state) => state.viewController.qtlConsensus;
export const selectQTLMethod = (state) => state.viewController.qtlMethod;
export const selectList = (name) => (state) => state.viewController[name];
export const selectListItem = (name,id) => (state) => { var element = state.viewController[name].find(e => (e.id === id));
                                                        return(element) };

export default viewControllerSlice.reducer;
