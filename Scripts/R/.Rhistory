cnjpop.df$num_seeds = vapply(cnjpop.df$num_seeds, FUN=cleanup_numeric_helper, FUN.VALUE=as.numeric(NA))
num_seeds_na.tf = is.na(cnjpop.df$num_seeds)
saveRDSw(num_seeds_na.tf, "num_seeds_na.tf.rds", compress=TRUE)
cnjpop.df.raw[num_seeds_na.tf, c(cnjpop.cols.include.prefix, "num_seeds")]   
saveRDSw(cnjpop.df, "cnjpop.df.rds", compress=TRUE)
DATA_PLOTS_FOLDER_PREFIX <- paste0(DATA_FOLDER_PREFIX,"/plots")
?quartz.save
quartz.savew <- function(file) {
    quartz.save(paste0(DATA_PLOTS_FOLDER_PREFIX,"/",file), type="pdf")
}
quartz.savew("p1_phenotype_scatterplots_outliers.pdf")
?quartz.save
?quartz.save
uartz.savew("p1_phenotype_scatterplots_outliers.pdf")
quartz.savew("p1_phenotype_scatterplots_outliers.pdf")
quartz.options(title="Phenotype Scatterplots with Outliers")
quartz.options(title="Phenotype Scatterplots with Outliers")
kjpar(mfrow=c(3,2), las=1, cex=0.8)
pairs(formula=~year+berry_length+berry_width+berry_weight+num_seeds, data=cnjpop.df, na.action=na.omit)
quartz.options(title="Phenotype Scatterplots with Outliers")
quartz.savew <- function(file, title) {
    quartz.save(paste0(DATA_PLOTS_FOLDER_PREFIX,"/",file), type="pdf", title=title)
}
quartz.savew("p1_phenotype_scatterplots_outliers.pdf", title="Phenotype Scatterplots with Outliers")
quartz.savew("p1_phenotype_scatterplots_outliers.pdf", title="Phenotype Scatterplots with Outliers")
par(mfrow=c(3,2), las=1, cex=0.8)
pairs(formula=~year+berry_length+berry_width+berry_weight+num_seeds, data=cnjpop.df, na.action=na.omit)
?quartz.save
quartz.savew("p1_phenotype_scatterplots_outliers.pdf", title="Phenotype Scatterplots with Outliers")
par(mfrow=c(3,2), las=1, cex=0.8)
pairs(formula=~year+berry_length+berry_width+berry_weight+num_seeds, data=cnjpop.df, na.action=na.omit)
dev.off()
?quartz
quartzw <- function(file, title) {
    quartz(title=title, file=paste0(DATA_PLOTS_FOLDER_PREFIX,"/",file), type="pdf")
}
quartzw(file="p1_phenotype_scatterplots_outliers.pdf", title="Phenotype Scatterplots with Outliers")
par(mfrow=c(3,2), las=1, cex=0.8)
pairs(formula=~year+berry_length+berry_width+berry_weight+num_seeds, data=cnjpop.df, na.action=na.omit)
dev.off()
quartzw(file="p1_phenotype_scatterplots_outliers.pdf", title="Phenotype Scatterplots with Outliers")
par(mfrow=c(3,2), las=1, cex=0.8, main="Phenotype Scatterplots with Outliers")
pairs(formula=~year+berry_length+berry_width+berry_weight+num_seeds, data=cnjpop.df, na.action=na.omit)
dev.off()
quartzw(file="p1_phenotype_scatterplots_outliers.pdf", title="Phenotype Scatterplots with Outliers")
par(mfrow=c(3,2), las=1, cex=0.8)
pairs(formula=~year+berry_length+berry_width+berry_weight+num_seeds, data=cnjpop.df, na.action=na.omit, main="Phenotype Scatterplots with Outliers"=)
pairs(formula=~year+berry_length+berry_width+berry_weight+num_seeds, data=cnjpop.df, na.action=na.omit, main="Phenotype Scatterplots with Outliers")
jdev.off()
dev.off()
assess_population_stats <- function(data, variable, subsets, subset_mask=NULL, threshold=2.57) {
    data.len   <- length(data[,variable])
    subset.len <- length(subsets)
    outlier.tf <-  rep(FALSE, data.len)
    inlier.tf  <- rep(FALSE, data.len)
    subset.names <- rep("", subset.len)
    hists   <- list()
    #Initialize the colors
    graph.cols <- colorRampPalette(c(rgb(1/4,1,0,1/4),rgb(0,0,1,1/4)),alpha=T)(subset.len)
    #Create a new graphics window
    #Loop through subsets, finding outliers and generating plots
    for (ix in 1:subset.len) {
        subset <- subsets[[ix]]
        if( !is.null(subset_mask) ) {
            subset <- subset & subset_mask
            attr(subset, "name") <- attr(subsets[[ix]],"name")
        }
        subset.ix <- which(subset)
        subset.quantiles <- quantile(data[subset.ix,variable], probs=seq(0,1,1/10))
        subset.inliers.tf <- (data[,variable] >= subset.quantiles[1] & data[,variable] <= subset.quantiles[10]) & subset
        subset.inliers.ix <- which(subset.inliers.tf)
        #Calculate sd and means of each, and then normalize to find outliers
        subset.inliers.mean   <- mean(data[subset.inliers.ix,variable])
        subset.inliers.sd     <- sd(data[subset.inliers.ix,variable])
        subset.sd.normalized <- rep(subset.inliers.mean, data.len)
        subset.sd.normalized[subset.ix]  <- abs(data[subset.ix,variable]-subset.inliers.mean)/subset.inliers.sd
        subset.inliers.normalized.tf <- (subset.sd.normalized < threshold) & subset
        outlier.tf   <- outlier.tf | ((!subset.inliers.normalized.tf) & subset)
        inlier.tf    <- inlier.tf | subset.inliers.normalized.tf
        subsets[[ix]]  <- subset & subset.inliers.normalized.tf
        attr(subsets[[ix]], "name") <- attr(subset, "name")
        subset.names[ix] <- attr(subset, "name")
    }
    quartz(paste0(variable," histogram"))
    histbreaks=seq(from=floor(min(data[inlier.tf,variable])), to=ceiling(max(data[inlier.tf,variable])), length.out=21)
    for (ix in 1:subset.len) {
        hists[[ix]] <- hist(data[subsets[[ix]],variable], breaks=histbreaks, freq=F)
    }
    for (ix in 1:subset.len) {
        if( ix == 1 ) {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), freq=F)
        } else {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), add=T, freq=F)
        }
    }
    legend("topright",legend=subset.names, bty='n', fill=graph.cols, col=graph.cols)
    return(outlier.tf)
}
p1.tf <- grepl("CNJ04.*", cnjpop.df$accession_name)
attr(p1.tf, 'name') <-  "CNJ04"
p2.tf <- grepl("CNJ02.*", cnjpop.df$accession_name)
attr(p2.tf, 'name') <-  "CNJ02"
p1_p1.tf <- grepl("Stevens", cnjpop.df$accession_name) & (cnjpop.df$population == "1")
attr(p1_p1.tf, 'name') <-  "CNJ04-Parents-Stevens"
p1_p2.tf <- grepl("Mullica Queen", cnjpop.df$accession_name) & (cnjpop.df$population == "1")
attr(p1_p2.tf, 'name') <-  "CNJ04-Parent-Mullica Queen"
p2_p1.tf <- grepl("Mullica Queen", cnjpop.df$accession_name) & (cnjpop.df$population == "2")
attr(p2_p1.tf, 'name') <-  "CNJ02-Parent-Mullica Queen"
p2_p2.tf <- grepl("Crimson Queen", cnjpop.df$accession_name) & (cnjpop.df$population == "2")
attr(p2_p2.tf, 'name') <-  "CNJ02-Parent-Crimson Queen"
?plot
?histogram
?hist
    plot_filename <- paste(subset.names, sep="_vs_")
    plot_filename <- paste0(variable, "_", plot_filename, "_histogram")
assess_population_stats <- function(data, variable, subsets, subset_mask=NULL, threshold=2.57) {
    data.len   <- length(data[,variable])
    subset.len <- length(subsets)
    outlier.tf <-  rep(FALSE, data.len)
    inlier.tf  <- rep(FALSE, data.len)
    subset.names <- rep("", subset.len)
    hists   <- list()
    #Initialize the colors
    graph.cols <- colorRampPalette(c(rgb(1/4,1,0,1/4),rgb(0,0,1,1/4)),alpha=T)(subset.len)
    #Create a new graphics window
    #Loop through subsets, finding outliers and generating plots
    for (ix in 1:subset.len) {
        subset <- subsets[[ix]]
        if( !is.null(subset_mask) ) {
            subset <- subset & subset_mask
            attr(subset, "name") <- attr(subsets[[ix]],"name")
        }
        subset.ix <- which(subset)
        subset.quantiles <- quantile(data[subset.ix,variable], probs=seq(0,1,1/10))
        subset.inliers.tf <- (data[,variable] >= subset.quantiles[1] & data[,variable] <= subset.quantiles[10]) & subset
        subset.inliers.ix <- which(subset.inliers.tf)
        #Calculate sd and means of each, and then normalize to find outliers
        subset.inliers.mean   <- mean(data[subset.inliers.ix,variable])
        subset.inliers.sd     <- sd(data[subset.inliers.ix,variable])
        subset.sd.normalized <- rep(subset.inliers.mean, data.len)
        subset.sd.normalized[subset.ix]  <- abs(data[subset.ix,variable]-subset.inliers.mean)/subset.inliers.sd
        subset.inliers.normalized.tf <- (subset.sd.normalized < threshold) & subset
        outlier.tf   <- outlier.tf | ((!subset.inliers.normalized.tf) & subset)
        inlier.tf    <- inlier.tf | subset.inliers.normalized.tf
        subsets[[ix]]  <- subset & subset.inliers.normalized.tf
        attr(subsets[[ix]], "name") <- attr(subset, "name")
        subset.names[ix] <- attr(subset, "name")
    }
    plot_filename <- paste(subset.names, sep="_vs_")
    plot_filename <- paste0(variable, "_", plot_filename, "_histogram")
    quartzw(file=plot_filename)
    histbreaks=seq(from=floor(min(data[inlier.tf,variable])), to=ceiling(max(data[inlier.tf,variable])), length.out=21)
    for (ix in 1:subset.len) {
        hists[[ix]] <- hist(data[subsets[[ix]],variable], breaks=histbreaks, freq=F)
    }
    for (ix in 1:subset.len) {
        if( ix == 1 ) {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), freq=F)
        } else {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), xlab=paste0(variable, " bins"), add=T, freq=F)
        }
    }
    legend("topright",legend=subset.names, bty='n', fill=graph.cols, col=graph.cols)
    dev.off()
    return(outlier.tf)
}
p1.tf <- grepl("CNJ04.*", cnjpop.df$accession_name)
attr(p1.tf, 'name') <-  "CNJ04"
p2.tf <- grepl("CNJ02.*", cnjpop.df$accession_name)
attr(p2.tf, 'name') <-  "CNJ02"
p1_p1.tf <- grepl("Stevens", cnjpop.df$accession_name) & (cnjpop.df$population == "1")
attr(p1_p1.tf, 'name') <-  "CNJ04-Parents-Stevens"
p1_p2.tf <- grepl("Mullica Queen", cnjpop.df$accession_name) & (cnjpop.df$population == "1")
attr(p1_p2.tf, 'name') <-  "CNJ04-Parent-Mullica Queen"
p2_p1.tf <- grepl("Mullica Queen", cnjpop.df$accession_name) & (cnjpop.df$population == "2")
attr(p2_p1.tf, 'name') <-  "CNJ02-Parent-Mullica Queen"
p2_p2.tf <- grepl("Crimson Queen", cnjpop.df$accession_name) & (cnjpop.df$population == "2")
attr(p2_p2.tf, 'name') <-  "CNJ02-Parent-Crimson Queen"
outlier.threshold <- 1.96
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
as.char(10)
char(10)
character(1)
character(10)
String(10)
string(10)
string(10)
as.char
?as.char
as.character(10)
assess_population_stats <- function(data, variable, subsets, subset_mask=NULL, threshold=2.57) {
    data.len   <- length(data[,variable])
    subset.len <- length(subsets)
    outlier.tf <-  rep(FALSE, data.len)
    inlier.tf  <- rep(FALSE, data.len)
    subset.names <- rep("", subset.len)
    subset.legends <- rep("", subset.len)
    hists   <- list()
    #Initialize the colors
    graph.cols <- colorRampPalette(c(rgb(1/4,1,0,1/4),rgb(0,0,1,1/4)),alpha=T)(subset.len)
    #Create a new graphics window
    #Loop through subsets, finding outliers and generating plots
    for (ix in 1:subset.len) {
        subset <- subsets[[ix]]
        if( !is.null(subset_mask) ) {
            subset <- subset & subset_mask
            attr(subset, "name") <- attr(subsets[[ix]],"name")
        }
        subset.ix <- which(subset)
        subset.quantiles <- quantile(data[subset.ix,variable], probs=seq(0,1,1/10))
        subset.inliers.tf <- (data[,variable] >= subset.quantiles[1] & data[,variable] <= subset.quantiles[10]) & subset
        subset.inliers.ix <- which(subset.inliers.tf)
        #Calculate sd and means of each, and then normalize to find outliers
        subset.inliers.mean   <- mean(data[subset.inliers.ix,variable])
        subset.inliers.sd     <- sd(data[subset.inliers.ix,variable])
        subset.sd.normalized <- rep(subset.inliers.mean, data.len)
        subset.sd.normalized[subset.ix]  <- abs(data[subset.ix,variable]-subset.inliers.mean)/subset.inliers.sd
        subset.inliers.normalized.tf <- (subset.sd.normalized < threshold) & subset
        outlier.tf   <- outlier.tf | ((!subset.inliers.normalized.tf) & subset)
        inlier.tf    <- inlier.tf | subset.inliers.normalized.tf
        subsets[[ix]]  <- subset & subset.inliers.normalized.tf
        attr(subsets[[ix]], "name") <- attr(subset, "name")
        attr(subsets[[ix]], "mean") <- subset.inliers.mean
        attr(subsets[[ix]], "sd") <- subset.inliers.sd
        subset.names[ix] <- attr(subset, "name")
        subset.legends[ix] <- paste0(subset.names[ix],"/Mean: ",as.character(subset.inliers.mean),"/SD: ",as.character(subset.inliers.sd))
    }
    histbreaks=seq(from=floor(min(data[inlier.tf,variable])), to=ceiling(max(data[inlier.tf,variable])), length.out=21)
    for (ix in 1:subset.len) {
        hists[[ix]] <- hist(data[subsets[[ix]],variable], breaks=histbreaks, freq=F)
    }
    plot_filename <- paste(subset.names, sep="_vs_")
    plot_filename <- paste0(variable, "_", plot_filename, "_histogram")
    quartzw(file=plot_filename)
    for (ix in 1:subset.len) {
        if( ix == 1 ) {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), freq=F)
        } else {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), xlab=paste0(variable, " bins"), add=T, freq=F)
        }
    }
    legend("topright",legend=subset.legends, bty='n', fill=graph.cols, col=graph.cols)
    dev.off()
    return(outlier.tf)
}
outlier.threshold <- 1.96
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
assess_population_stats <- function(data, variable, subsets, subset_mask=NULL, threshold=2.57) {
    data.len   <- length(data[,variable])
    subset.len <- length(subsets)
    outlier.tf <-  rep(FALSE, data.len)
    inlier.tf  <- rep(FALSE, data.len)
    subset.names <- rep("", subset.len)
    subset.legends <- rep("", subset.len)
    hists   <- list()
    #Initialize the colors
    graph.cols <- colorRampPalette(c(rgb(1/4,1,0,1/4),rgb(0,0,1,1/4)),alpha=T)(subset.len)
    #Create a new graphics window
    #Loop through subsets, finding outliers and generating plots
    for (ix in 1:subset.len) {
        subset <- subsets[[ix]]
        if( !is.null(subset_mask) ) {
            subset <- subset & subset_mask
            attr(subset, "name") <- attr(subsets[[ix]],"name")
        }
        subset.ix <- which(subset)
        subset.quantiles <- quantile(data[subset.ix,variable], probs=seq(0,1,1/10))
        subset.inliers.tf <- (data[,variable] >= subset.quantiles[1] & data[,variable] <= subset.quantiles[10]) & subset
        subset.inliers.ix <- which(subset.inliers.tf)
        #Calculate sd and means of each, and then normalize to find outliers
        subset.inliers.mean   <- mean(data[subset.inliers.ix,variable])
        subset.inliers.sd     <- sd(data[subset.inliers.ix,variable])
        subset.sd.normalized <- rep(subset.inliers.mean, data.len)
        subset.sd.normalized[subset.ix]  <- abs(data[subset.ix,variable]-subset.inliers.mean)/subset.inliers.sd
        subset.inliers.normalized.tf <- (subset.sd.normalized < threshold) & subset
        outlier.tf   <- outlier.tf | ((!subset.inliers.normalized.tf) & subset)
        inlier.tf    <- inlier.tf | subset.inliers.normalized.tf
        subsets[[ix]]  <- subset & subset.inliers.normalized.tf
        attr(subsets[[ix]], "name") <- attr(subset, "name")
        attr(subsets[[ix]], "mean") <- subset.inliers.mean
        attr(subsets[[ix]], "sd") <- subset.inliers.sd
        subset.names[ix] <- attr(subset, "name")
        mean.char <- as.character(round(subset.inliers.mean,2))
        sd.char <- as.character(round(subset.inliers.sd,2))
        subset.legends[ix] <- paste0(subset.names[ix],"/Mean: ",mean.char,"/SD: ",sd.char)
    }
    histbreaks=seq(from=floor(min(data[inlier.tf,variable])), to=ceiling(max(data[inlier.tf,variable])), length.out=21)
    for (ix in 1:subset.len) {
        hists[[ix]] <- hist(data[subsets[[ix]],variable], breaks=histbreaks, freq=F)
    }
    plot_filename <- paste(subset.names, sep="_vs_")
    plot_filename <- paste0(variable, "_", plot_filename, "_histogram")
    quartzw(file=plot_filename)
    for (ix in 1:subset.len) {
        if( ix == 1 ) {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), freq=F)
        } else {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), xlab=paste0(variable, " bins"), add=T, freq=F)
        }
    }
    legend("topright",legend=subset.legends, bty='n', fill=graph.cols, col=graph.cols)
    dev.off()
    return(outlier.tf)
}
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
?hist
assess_population_stats <- function(data, variable, subsets, subset_mask=NULL, threshold=2.57) {
    data.len   <- length(data[,variable])
    subset.len <- length(subsets)
    outlier.tf <-  rep(FALSE, data.len)
    inlier.tf  <- rep(FALSE, data.len)
    subset.names <- rep("", subset.len)
    subset.legends <- rep("", subset.len)
    hists   <- list()
    #Initialize the colors
    graph.cols <- colorRampPalette(c(rgb(1/4,1,0,1/4),rgb(0,0,1,1/4)),alpha=T)(subset.len)
    #Create a new graphics window
    #Loop through subsets, finding outliers and generating plots
    for (ix in 1:subset.len) {
        subset <- subsets[[ix]]
        if( !is.null(subset_mask) ) {
            subset <- subset & subset_mask
            attr(subset, "name") <- attr(subsets[[ix]],"name")
        }
        subset.ix <- which(subset)
        subset.quantiles <- quantile(data[subset.ix,variable], probs=seq(0,1,1/10))
        subset.inliers.tf <- (data[,variable] >= subset.quantiles[1] & data[,variable] <= subset.quantiles[10]) & subset
        subset.inliers.ix <- which(subset.inliers.tf)
        #Calculate sd and means of each, and then normalize to find outliers
        subset.inliers.mean   <- mean(data[subset.inliers.ix,variable])
        subset.inliers.sd     <- sd(data[subset.inliers.ix,variable])
        subset.sd.normalized <- rep(subset.inliers.mean, data.len)
        subset.sd.normalized[subset.ix]  <- abs(data[subset.ix,variable]-subset.inliers.mean)/subset.inliers.sd
        subset.inliers.normalized.tf <- (subset.sd.normalized < threshold) & subset
        outlier.tf   <- outlier.tf | ((!subset.inliers.normalized.tf) & subset)
        inlier.tf    <- inlier.tf | subset.inliers.normalized.tf
        subsets[[ix]]  <- subset & subset.inliers.normalized.tf
        attr(subsets[[ix]], "name") <- attr(subset, "name")
        attr(subsets[[ix]], "mean") <- subset.inliers.mean
        attr(subsets[[ix]], "sd") <- subset.inliers.sd
        subset.names[ix] <- attr(subset, "name")
        mean.char <- as.character(round(subset.inliers.mean,2))
        sd.char <- as.character(round(subset.inliers.sd,2))
        subset.legends[ix] <- paste0(subset.names[ix],"/Mean: ",mean.char,"/SD: ",sd.char)
    }
    histbreaks=seq(from=floor(min(data[inlier.tf,variable])), to=ceiling(max(data[inlier.tf,variable])), length.out=21)
    for (ix in 1:subset.len) {
        hists[[ix]] <- hist(data[subsets[[ix]],variable], breaks=histbreaks, freq=F)
        dev.off()
    }
    plot_filename <- paste(subset.names, sep="_vs_")
    plot_filename <- paste0(variable, "_", plot_filename, "_histogram.pdf")
    quartzw(file=plot_filename)
    for (ix in 1:subset.len) {
        if( ix == 1 ) {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), freq=F)
        } else {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), xlab=paste0(variable, " bins"), add=T, freq=F)
        }
    }
    legend("topright",legend=subset.legends, bty='n', fill=graph.cols, col=graph.cols)
    dev.off()
    return(outlier.tf)
}
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
berry_length.outliers <- assess_population_stats(cnjpop.df,"berry_length", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_length_na.tf))
berry_width.outliers <- assess_population_stats(cnjpop.df,"berry_width", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_width_na.tf))
berry_num_seed.outliers <- assess_population_stats(cnjpop.df,"num_seeds", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!num_seeds_na.tf))
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
assess_population_stats <- function(data, variable, subsets, subset_mask=NULL, threshold=2.57) {
    data.len   <- length(data[,variable])
    subset.len <- length(subsets)
    outlier.tf <-  rep(FALSE, data.len)
    inlier.tf  <- rep(FALSE, data.len)
    subset.names <- rep("", subset.len)
    subset.legends <- rep("", subset.len)
    hists   <- list()
    #Initialize the colors
    graph.cols <- colorRampPalette(c(rgb(1/4,1,0,1/4),rgb(0,0,1,1/4)),alpha=T)(subset.len)
    #Create a new graphics window
    #Loop through subsets, finding outliers and generating plots
    for (ix in 1:subset.len) {
        subset <- subsets[[ix]]
        if( !is.null(subset_mask) ) {
            subset <- subset & subset_mask
            attr(subset, "name") <- attr(subsets[[ix]],"name")
        }
        subset.ix <- which(subset)
        subset.quantiles <- quantile(data[subset.ix,variable], probs=seq(0,1,1/10))
        subset.inliers.tf <- (data[,variable] >= subset.quantiles[1] & data[,variable] <= subset.quantiles[10]) & subset
        subset.inliers.ix <- which(subset.inliers.tf)
        #Calculate sd and means of each, and then normalize to find outliers
        subset.inliers.mean   <- mean(data[subset.inliers.ix,variable])
        subset.inliers.sd     <- sd(data[subset.inliers.ix,variable])
        subset.sd.normalized <- rep(subset.inliers.mean, data.len)
        subset.sd.normalized[subset.ix]  <- abs(data[subset.ix,variable]-subset.inliers.mean)/subset.inliers.sd
        subset.inliers.normalized.tf <- (subset.sd.normalized < threshold) & subset
        outlier.tf   <- outlier.tf | ((!subset.inliers.normalized.tf) & subset)
        inlier.tf    <- inlier.tf | subset.inliers.normalized.tf
        subsets[[ix]]  <- subset & subset.inliers.normalized.tf
        attr(subsets[[ix]], "name") <- attr(subset, "name")
        attr(subsets[[ix]], "mean") <- subset.inliers.mean
        attr(subsets[[ix]], "sd") <- subset.inliers.sd
        subset.names[ix] <- attr(subset, "name")
        mean.char <- as.character(round(subset.inliers.mean,2))
        sd.char <- as.character(round(subset.inliers.sd,2))
        subset.legends[ix] <- paste0(subset.names[ix],"/Mean: ",mean.char,"/SD: ",sd.char)
    }
    histbreaks=seq(from=floor(min(data[inlier.tf,variable])), to=ceiling(max(data[inlier.tf,variable])), length.out=21)
    for (ix in 1:subset.len) {
        hists[[ix]] <- hist(data[subsets[[ix]],variable], breaks=histbreaks, freq=F)
        dev.off()
    }
    plot_filename <- paste(c(subset.names), sep="_vs_")
    plot_filename <- paste0(variable, "_", plot_filename, "_histogram.pdf")
    quartzw(file=plot_filename)
    for (ix in 1:subset.len) {
        if( ix == 1 ) {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), freq=F)
        } else {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), xlab=paste0(variable, " bins"), add=T, freq=F)
        }
    }
    legend("topright",legend=subset.legends, bty='n', fill=graph.cols, col=graph.cols)
    dev.off()
    return(outlier.tf)
}
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
assess_population_stats <- function(data, variable, subsets, subset_mask=NULL, threshold=2.57) {
    data.len   <- length(data[,variable])
    subset.len <- length(subsets)
    outlier.tf <-  rep(FALSE, data.len)
    inlier.tf  <- rep(FALSE, data.len)
    subset.names <- rep("", subset.len)
    subset.legends <- rep("", subset.len)
    hists   <- list()
    #Initialize the colors
    graph.cols <- colorRampPalette(c(rgb(1/4,1,0,1/4),rgb(0,0,1,1/4)),alpha=T)(subset.len)
    #Create a new graphics window
    #Loop through subsets, finding outliers and generating plots
    for (ix in 1:subset.len) {
        subset <- subsets[[ix]]
        if( !is.null(subset_mask) ) {
            subset <- subset & subset_mask
            attr(subset, "name") <- attr(subsets[[ix]],"name")
        }
        subset.ix <- which(subset)
        subset.quantiles <- quantile(data[subset.ix,variable], probs=seq(0,1,1/10))
        subset.inliers.tf <- (data[,variable] >= subset.quantiles[1] & data[,variable] <= subset.quantiles[10]) & subset
        subset.inliers.ix <- which(subset.inliers.tf)
        #Calculate sd and means of each, and then normalize to find outliers
        subset.inliers.mean   <- mean(data[subset.inliers.ix,variable])
        subset.inliers.sd     <- sd(data[subset.inliers.ix,variable])
        subset.sd.normalized <- rep(subset.inliers.mean, data.len)
        subset.sd.normalized[subset.ix]  <- abs(data[subset.ix,variable]-subset.inliers.mean)/subset.inliers.sd
        subset.inliers.normalized.tf <- (subset.sd.normalized < threshold) & subset
        outlier.tf   <- outlier.tf | ((!subset.inliers.normalized.tf) & subset)
        inlier.tf    <- inlier.tf | subset.inliers.normalized.tf
        subsets[[ix]]  <- subset & subset.inliers.normalized.tf
        attr(subsets[[ix]], "name") <- attr(subset, "name")
        attr(subsets[[ix]], "mean") <- subset.inliers.mean
        attr(subsets[[ix]], "sd") <- subset.inliers.sd
        subset.names[ix] <- attr(subset, "name")
        mean.char <- as.character(round(subset.inliers.mean,2))
        sd.char <- as.character(round(subset.inliers.sd,2))
        subset.legends[ix] <- paste0(subset.names[ix],"/Mean: ",mean.char,"/SD: ",sd.char)
    }
    histbreaks=seq(from=floor(min(data[inlier.tf,variable])), to=ceiling(max(data[inlier.tf,variable])), length.out=21)
    for (ix in 1:subset.len) {
        hists[[ix]] <- hist(data[subsets[[ix]],variable], breaks=histbreaks, freq=F)
        dev.off()
    }
    plot_filename <- paste(c(subset.names), sep="_vs_")
    browser()
    plot_filename <- paste0(variable, "_", plot_filename, "_histogram.pdf")
    quartzw(file=plot_filename)
    for (ix in 1:subset.len) {
        if( ix == 1 ) {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), main=paste0(variable, " Histogram Over All Years"), xlab=paste0(variable, " bins"), freq=F)
        } else {
            plot(hists[[ix]], col=graph.cols[ix], ylim=c(0.0, 1.0), xlab=paste0(variable, " bins"), add=T, freq=F)
        }
    }
    legend("topright",legend=subset.legends, bty='n', fill=graph.cols, col=graph.cols)
    dev.off()
    return(outlier.tf)
}
jberry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
quit
quit
f
f
'pjjjjjjjjjjberry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
berry_weight.outliers <- assess_population_stats(cnjpop.df,"berry_weight", list(p1.tf,p2.tf), threshold=outlier.threshold, subset_mask=(!berry_weight_na.tf))
plot_filename
?plot_filename
?paste
?paste
unlist(subset.names)
subset.names
paste(subset.names)
str(subset.names)
paste(unlist(subset.names), sep="_")
paste0(subset.names)
f
?unpack
?unlist
paste(c("hello","world"),sep="_vs_")
?paste
library(snow)
